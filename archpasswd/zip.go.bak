package archpasswd

import (
	"fmt"
	"io"
	"strings"

	"github.com/yeka/zip"
)

type zipChecker struct {
	FilePath string
}

func (c *zipChecker) CheckPassword(filePath, password string) (bool, error) {
	// 使用 c.FilePath 替代传入的文件路径
	// 尝试作为 ZIP 打开
	r, err := zip.OpenReader(filePath)
	if err != nil {
		return false, fmt.Errorf("%w: %v", ErrOpenFileFailed, err)
	}
	defer r.Close()

	// 检查是否有加密文件
	hasEncrypted := false
	encryptedFiles := make([]*zip.File, 0)
	for _, f := range r.File {
		if f.IsEncrypted() {
			hasEncrypted = true
			encryptedFiles = append(encryptedFiles, f)
		}
	}

	if !hasEncrypted {
		return false, ErrFileNotEncrypted
	}

	// 只尝试加密文件
	for _, f := range encryptedFiles {
		f.SetPassword(password)
		rc, err := f.Open()
		if err != nil {
			if strings.Contains(err.Error(), "password") {
				continue
			}
			return false, fmt.Errorf("%w: %v", ErrOpenFileFailed, err)
		}
		defer rc.Close()

		// 尝试读取内容
		_, err = io.ReadAll(rc)
		if err != nil {
			if strings.Contains(err.Error(), "password") ||
				strings.Contains(err.Error(), "checksum error") {
				continue
			}
			return false, fmt.Errorf("%w: %v", ErrOpenFileFailed, err)
		}

		return true, nil
	}

	return false, nil
}
